<?php
// $Id$

/**
 * Implementation of hook_menu().
 */
function at_rally_auth_perm() {
    return array('use SMS Blast', 'administer SMS Blast');
}

/**
 * Implementation of hook_menu().
 */
function sms_blast_menu() {
  $items = array();

  $items['admin/smsframework/sms_blast'] = array(
    'title' => t('SMS Blast'),
    'description' => t('SMS Blast overview and help'),
    'page callback' => 'sms_blast_overview',
    'access arguments' => array('use SMS Blast'),
  );
  $items['admin/smsframework/sms_blast/overview'] = array(
    'title' => t('Overview'),
    'access arguments' => array('use SMS Blast'),
    'weight' => -1,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/smsframework/sms_blast/send'] = array(
    'title' => t('Send with form'),
    'description' => t('Send bulk SMS Blast to a list of numbers you paste into a form'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sms_blast_sendform'),
    'access arguments' => array('use SMS Blast'),
    'weight' => 1,
    'type' => MENU_LOCAL_TASK,
  );
  if (module_exists('views')) {
    $items['admin/smsframework/sms_blast/sendview'] = array(
      'title' => t('Send with view'),
      'description' => t('Send bulk SMS Blast to a view containing nodes with a SMS number in a CCK field.'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('sms_blast_sendview'),
      'access arguments' => array('use SMS Blast'),
      'weight' => 2,
      'type' => MENU_LOCAL_TASK,
    );
  }
  $items['admin/smsframework/sms_blast/history'] = array(
    'title' => t('History'),
    'description' => t('View log of past SMS blasts.'),
    'page callback' => 'sms_blast_history',
    'access arguments' => array('use SMS Blast'),
    'weight' => 10,
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/smsframework/sms_blast/settings'] = array(
    'title' => t('Settings'),
    'description' => t('SMS Blast configuration and defaults.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sms_blast_admin_settings'),
    'access arguments' => array('administer SMS Blast'),
    'weight' => 20,
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/smsframework/sms_blast/history/%'] = array(
    'page callback' => 'sms_blast_history_detail',
    'page arguments' => array(4),
    'access arguments' => array('use SMS Blast'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Module settings form. */
function sms_blast_admin_settings() {
  $form = array();
  $form['help_text'] = array(
    '#type' => 'item',
    '#value' => t('Use this form to configure SMS Blast settings and defaults.'),
  );

  if (module_exists('views')) {
    $all_views = views_get_all_views();
    $views = array();
    foreach ($all_views as $view) {
        $views[ $view->name ] = $view->name;
    }
    $cck_fields = array_keys(content_fields());

    $form['sms_blast_fromview_defaults'] = array(
      '#type' => 'fieldset',
      '#title' => t('"Send from View" defaults'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
    );
    $form['sms_blast_fromview_defaults']['sms_blast_default_view'] = array(
      '#type' => 'select',
      '#title' => t('Default View'),
      '#default_value' => variable_get('sms_blast_default_view', ''),
      '#description' => t('Default SMS Blast View'),
      '#options' => $views,
    );
    $form['sms_blast_fromview_defaults']['sms_blast_default_cckfield'] = array(
      '#type' => 'select',
      '#title' => t('Default View'),
      '#default_value' => variable_get('sms_blast_default_cckfield', ''),
      '#description' => t('Default SMS Blast CCK Field'),
      '#options' => array_combine($cck_fields, $cck_fields),
    );
  }
  else {
    drupal_set_message(t('The Views module is not installed, so you cannot use the "Send from View" feature. Don\'t worry, you can still use the "Send with form" feature. There is nothing to configure here unless Views is installed.'));
  }
  return system_settings_form($form);
}

function sms_blast_overview() {
  $output = '';
  $output .= t('XXX needs work: right now it just prints README.txt');
  if (!module_exists('views')) {
    drupal_set_message(t('The Views module is not installed, so you cannot use the "Send from View" feature. Don\'t worry, you can still use the "Send with form" feature.<br />If you want to be able to send SMS Blasts to numbers that are stored in node CCK fields, you\'ll need to install and enable the Views module.'));
  }
  $output .= '<pre>' . `cat sites/all/modules/sms_blast/README.txt` . '</pre>'; // XXX this has got to go - just temporary!!
  return $output;
}
function sms_blast_history() {
  $table = 'sms_blast_history';
  $output = '';
  $rows_per_page = 20;
  $rows=array();
  $header = array(t('Send Time'), t('View Name'), t('Message'), t('Field Name'));
  $select = "SELECT time, view_name, message, field_name, blastid FROM {$table} ORDER BY time DESC";
  $result = pager_query($select, $rows_per_page);
  while ($row = db_fetch_array($result)) {
    array_walk($row, 'check_plain');
    $row['time'] = date('Y-m-d H:m:s', $row['time']);
    $row['message'] = l($row['message'], 'admin/smsframework/sms_blast/history/'. $row['blastid']);
    unset($row['blastid']);
    $rows[] = $row;
  }
  $output .= theme('table', $header, $rows);
  $output .= theme('pager', $rows_per_page);
  return $output;
}

function sms_blast_history_detail($blastid) {
  $output = '';
  $table = 'sms_blast_history';
  $select = "SELECT time, view_name, message, field_name FROM {$table} WHERE blastid = ". $blastid ." ORDER BY time DESC";
  $result = db_query($select);
  if ($row = db_fetch_array($result)) {
    $output .= '<h1>'. t('SMS Blast details:') .'</h1>';
    $output .= t('Time: ') . date('Y-m-d H:m:s', $row['time']) ."<br />";
    $output .= t('Message: ') . check_plain($row['message']) ."<br />";
    $output .= t('Sent to View: ') . l($row['view_name'], 'admin/build/views/edit/'. check_plain($row['view_name'])) ."<br />";
  }
  else {
    return FALSE;
  }

  $table = 'sms_blast_history_sms';
  $select = "SELECT smsid, nid, smsnumber, smsstatus FROM {$table} WHERE blastid = ". $blastid;
  $rows_per_page = 20;
  $rows=array();
  $header = array(t('SMS Number'), t('SMS Send Results'));
  $result = pager_query($select, $rows_per_page);
  while ($row = db_fetch_array($result)) {
    array_walk($row, 'check_plain');
    $row['smsnumber'] = l($row['smsnumber'], 'node/'. $row['nid']);
    unset($row['smsid']);
    unset($row['nid']);
    $rows[] = $row;
  }
  $output .= theme('table', $header, $rows);
  $output .= theme('pager', $rows_per_page);
  return $output;
}

function sms_blast_sendform($form_state) {
  $form = array();
  if (empty($form_state['values'])) {
    $form['help_text'] = array(
      '#type' => 'item',
      '#value' => t('Use this form to send an SMS to a list of numbers you paste into the field below.'),
    );
    $form['sms_blast_message'] = array(
      '#type' => 'textfield',
      '#title' => t('SMS message'),
      '#default_value' => t('Put your message here'),
      '#description' => t('This message will be sent in the SMS Blast.'),
      '#size' => '140',
      '#maxlength' => '140',
    );
    $form['sms_blast_numbers'] = array(
      '#type' => 'textarea',
      '#title' => t('Recipient SMS numbers'),
      '#default_value' => '',
      '#description' => t('SMS numbers should separated by commas or newlines, for example: 6075551212, 6075551213, ...') . '<br />' . t('Currently, only 10-digit US numbers are supported (no leading 1).'),
      '#cols' => '40',
      '#rows' => '4',
    );
    $form['submit'] = array(
      '#value' => t('Preview SMS Blast'),
      '#type' => 'submit',
    );
  }
  else { // sendform confirmation page
    $form['help_text'] = array(
      '#type' => 'item',
      '#value' => '<p>' . t('The following message will be SMS Blasted to %smsnumcount numbers:<br /><b>%smsmsg</b><br />Warning - SMS spam is illegal.  Please ensure that your message complies with ', array( '%smsnumcount' =>  count(preg_split('/\s*[,|\n]\s*/', $form_state['values']['sms_blast_numbers'])), '%smsmsg' => $form_state['values']['sms_blast_message'])) . l(t('MMA Best Practices'), 'http://www.mmaglobal.com/bestpractices.pdf') . '.</p>',
    );
    $form['submit'] = array(
      '#value' => t('Send SMS Blast'),
      '#type' => 'submit',
    );
    $form['send_confirmed'] = array('#type' => 'hidden', '#value' => 'true');
    drupal_set_message(t('Please double-check your message text and then click the button below to send it.'), 'warning');
  }

  return $form;
}

function sms_blast_sendform_submit($form, &$form_state) {
  if (!isset($form_state['values']['send_confirmed'])) { // submitted for preview/validation
    // validate message isn't too long
    if (drupal_strlen($form_state['values']['sms_blast_message']) > 140) {
      drupal_set_message(t('Error - SMS message cannot be longer than 140 characters.'), 'error');
      unset($form_state['values']);
      return $form;
    }
    $form_state['storage']['sms_blast_message'] = $form_state['values']['sms_blast_message'];
    $form_state['storage']['sms_blast_numbers'] = $form_state['values']['sms_blast_numbers'];
    $form_state['rebuild'] = TRUE; // This is vital so the values are there
    return $form;

  }
  else {   // submitted/confirmed for sending
    $themessage = $form_state['storage']['sms_blast_message'] ;
    $blastid = sms_blast_log_blast( $themessage, 'Send with form', '');
    foreach ( preg_split('/\s*[,|\n]\s*/', $form_state['storage']['sms_blast_numbers']) as $thesmsnumber) {
      // validate and format the SMS number
      $thesmsnumber = sms_blast_validate_phone($thesmsnumber);
      if (! $thesmsnumber) {
        sms_blast_log_blastsms( $blastid, $thesmsnumber, $thenode->nid, t('Skipping SMS to %smsnum - bad SMS number', array( '%smsnum' => $thesmsnumber)));
        continue;
      }
      // actually send the SMS
      if ( sms_send($thesmsnumber, $themessage)) {
        sms_blast_log_blastsms( $blastid, $thesmsnumber, $thenode->nid, t('Sent SMS to %smsnum: %smsmsg', array( '%smsnum' => $thesmsnumber, '%smsmsg' => $themessage )));
      }
      else {
        sms_blast_log_blastsms( $blastid, $thesmsnumber, $thenode->nid, t('Error sending SMS to %smsnum: %smsmsg', array( '%smsnum' => $thesmsnumber, '%smsmsg' => $themessage )));
      }
    }
    watchdog('sms_blast', 'Finished SMS Blast id %blastid: %smsmsg', array( '%blastid' => $blastid, '%smsmsg' => $themessage));
    drupal_set_message(t('Finished SMS Blast to %numrecipients numbers: %smsmsg', array( '%numrecipients' => count(preg_split('/\s*[,|\n]\s*/', $form_state['storage']['sms_blast_numbers'])), '%smsmsg' => $themessage)));

    unset($form_state['storage']); // send user back to the start
    return TRUE;
  }
}

/**
 */
function sms_blast_sendview($form_state) {
  if (!module_exists('views')) {
    drupal_set_message(t('The Views module is not installed, so you cannot use the "Send from View" feature.', 'error'));
    return;
  }
  if (empty($form_state['values'])) {
    $form['help_text'] = array(
      '#type' => 'item',
      '#value' => t('Use this form to send an SMS to a list of numbers stored in nodes returned by a view.'),
    );

    $all_views = views_get_all_views();
    $views = array();
    foreach ($all_views as $view) {
        $views[ $view->name ] = $view->name;
    }
    $cck_fields = array_keys(content_fields());
    $form['sms_blast_view'] = array(
      '#type' => 'select',
      '#title' => t('Select a View'),
      '#default_value' => variable_get('sms_blast_default_view', ''),
      '#description' => t('SMS Blast will go to all nodes in this View.'),
      '#options' => $views,
    );
    $form['sms_blast_cckfield'] = array(
      '#type' => 'select',
      '#title' => t('Select a CCK field'),
      '#default_value' => variable_get('sms_blast_default_cckfield', ''),
      '#description' => t('Pick the CCK field that contains the SMS number you want to send to.  CAUTION: this field should exist for all nodes in your View!'),
      '#options' => array_combine($cck_fields, $cck_fields),
    );
    $form['sms_blast_message'] = array(
      '#type' => 'textfield',
      '#title' => t('SMS message'),
      '#default_value' => t('Put your message here'),
      '#description' => t('This message will be sent in the SMS Blast.'),
      '#size' => '140',
      '#maxlength' => '140',
    );
    $form['submit'] = array(
      '#value' => t('Preview SMS Blast'),
      '#type' => 'submit',
    );
  }
  else { # sendview confirmation page

    $form['submit'] = array(
      '#prefix' => t('<p>The following message will be SMS Blasted to %smsnumcount numbers:<br /><b>%smsmsg</b><br />Warning - SMS spam is illegal.  Please ensure that your message complies with ', array('%smsnumcount' =>  $form_state['storage']['smsnumcount'], '%smsmsg' => $form_state['values']['sms_blast_message'])) . l(t('MMA Best Practices'), 'http://www.mmaglobal.com/bestpractices.pdf') .'.</p><br />',
      '#value' => t('Send SMS Blast'),
      '#type' => 'submit',
    );
    $form['send_confirmed'] = array('#type' => 'hidden', '#value' => 'true');

    drupal_set_message(t('Please double-check your message text and then click the button below to send it.'), 'warning');
  }
  return $form;
}

###########
#function sms_blast_sendview_validate($form, &$form_state) {
#}

/**
 * Process reinstall menu form submissions.
 */
function sms_blast_sendview_submit($form, &$form_state) {
  if (!isset($form_state['values']['send_confirmed'])) { // submitted for preview/validation
    // validate message isn't too long
    if (drupal_strlen($form_state['values']['sms_blast_message']) > 140) {
      drupal_set_message(t('Error - SMS message cannot be longer than 140 characters.'), 'error');
      unset($form_state['values']);
      return $form;
    }

    // validate CCK field is present in each node in the view
    $view = views_get_view($form_state['values']['sms_blast_view']);
    $view->execute();
    $cckfieldname = 'node_data_' . $form_state['values']['sms_blast_cckfield'] . '_' . $form_state['values']['sms_blast_cckfield'] . '_value';
    $cckerror = 0;
    foreach ($view->result as $thenode) {
      if (!isset($thenode->$cckfieldname)) {
        $cckerror = 1;
        break;
      }
    }
    if ($cckerror) {
      drupal_set_message(t('Error - the CCK field you selected %smsfieldname is not present in the nodes in the view %smsview.', array( '%smsfieldname' => $form_state['values']['sms_blast_cckfield'], '%smsview' => $form_state['values']['sms_blast_view'])), 'error');
      unset($form_state['values']);
      return $form;
    }
    $form_state['rebuild'] = TRUE; // This is vital so the values are there
    $form_state['storage']['smsform_values'] = $form_state['values'];
    $form_state['storage']['smsnumcount'] = count($view->result);
    return $form;

  }
  else {   // submitted/confirmed for sending
    $cckfieldname = 'node_data_' . $form_state['storage']['smsform_values']['sms_blast_cckfield'] . '_' . $form_state['storage']['smsform_values']['sms_blast_cckfield'] . '_value';

    $themessage = $form_state['storage']['smsform_values']['sms_blast_message'] ;
    $view = views_get_view($form_state['storage']['smsform_values']['sms_blast_view']);
    $view->execute();

    $blastid = sms_blast_log_blast( $themessage, $view->name, $form_state['storage']['smsform_values']['sms_blast_cckfield']);
    foreach ($view->result as $thenode) {
      if (!isset($thenode->$cckfieldname)) {
        sms_blast_log_blastsms( $blastid, $thesmsnumber, $thenode->nid, t('Skipping SMS to %smsnum - missing SMS number field %cckfieldname', array( '%smsnum' => $thesmsnumber, '%cckfieldname' => $cckfieldname )));
        continue;
      }
      $thesmsnumber = $thenode->$cckfieldname;

      // validate and format the SMS number
      $thesmsnumber = sms_blast_validate_phone($thesmsnumber);
      if (! $thesmsnumber) {
        sms_blast_log_blastsms( $blastid, $thesmsnumber, $thenode->nid, t('Skipping SMS to %smsnum - bad SMS number in field %cckfieldname', array( '%smsnum' => $thesmsnumber, '%cckfieldname' => $cckfieldname )));
        continue;
      }

      // actually send the SMS
      if ( sms_send($thesmsnumber, $themessage)) {
        sms_blast_log_blastsms( $blastid, $thesmsnumber, $thenode->nid, t('Sent SMS to %smsnum: %smsmsg', array( '%smsnum' => $thesmsnumber, '%smsmsg' => $themessage )));
      }
      else {
        sms_blast_log_blastsms( $blastid, $thesmsnumber, $thenode->nid, t('Error sending SMS to %smsnum: %smsmsg', array( '%smsnum' => $thesmsnumber, '%smsmsg' => $themessage )));
      }
    }
    watchdog('sms_blast', 'Finished SMS Blast to %smsviewname', array( '%smsviewname' =>  $view->name, '%smsmsg' => $form_state['storage']['smsform_values']['sms_blast_message'] ));
    drupal_set_message(t('Finished SMS Blast to %smsviewname', array( '%smsviewname' =>  $view->name)), 'warning');
    unset($form_state['storage']); // send user back to the start
    return TRUE;
  }
}

function sms_blast_log_blast($themessage, $theview, $thefield) {
  $table = 'sms_blast_history';
  $data =  array(
    'message' => $themessage,
    'view_name' => $theview,
    'field_name' => $thefield,
    'time' => time(),
  );
  drupal_write_record($table, $data);
  $blastid = db_last_insert_id($table, 'blastid');
  watchdog('sms_blast', 'Sending SMS Blast to %smsviewname: %smsmsg', array( '%smsviewname' =>  $theview, '%smsmsg' => $themessage ));
  return ($blastid);
}

function sms_blast_log_blastsms( $blastid, $thesmsnumber, $thenodeid, $thestatus) {
  $table = 'sms_blast_history_sms';
  $data =  array(
      'blastid' => $blastid,
      'smsnumber' => $thesmsnumber,
      'nid' => $thenodeid,
      'smsstatus' => $thestatus,
  );
  drupal_write_record($table, $data);
  watchdog('sms_blast', $thestatus);
  return TRUE;
}

function sms_blast_validate_phone($phone_raw) {
  $phone = 0;
  // phone numbers missing the 1 prefix
  if (preg_match('/^1\d{10}$/', $phone_raw, $matches)) {
    $phone = '1' . $matches[0];
  // phone numbers with the 1 prefix
  }
  elseif (preg_match('/^\d{10}$/', $phone_raw, $matches)) {
    $phone = $matches[0];
  }
  return $phone;
}

